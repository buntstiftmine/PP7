## TASK 1
# Preprocess
By running the command "gcc -E solutions/sample.c -o solutions/sample.i" the information in file sample.c is accessed from the included libraries and written into a new file sample.i. The new ".i" file includes the whole studio.h library with all included functions. Furthermore, in sample.i predefined macros are replaced with their associated value.

# Compile to assembly
The command "gcc -S solutions/sample.i -o solutions/sample.s" generated a file, here "sample.s", which contains the information in a language that your machine is able to process. Therefore, the content of "sample.i" is translated/compiled into assambly instructions.

# Assemble
The assembler created an object file sample.o based on sample.s by running "gcc -c solutions/sample.s -o solutions/sample.o". The object file is written in machine language and consists of a series of zeros and ones.

# Link
The contents of the .o file are linked with missing functions in the available libraries to create the executable file "sample. So the command "gcc solutions/sample.o -o solutions/sample" created an executable file with functions of the .o file but in commands that your processor is able to understand.

## TASK 2
# grep
With the grep command the text file is searched for parts that contain a specific phrase, here printf. The result is given as an output as well as the line where it was found, here line 4.

#sed
The sed command replaces printf with debug_printf in the whole file.

#awk
The awk command is similar to the grep function but with the possibility of only searching in a predefined range of lines.

#vim interactive
You can search "/printf" and replace ":%s/printf/debug_printf/g" when working in the vim editor. With "/printf" the search results are visually highlighted in the editor.

#vim CLI
This procedure allows you to execute the same steps as in interactive vim but without opening the editor.

## TASK 3
# The role of extern declarations
The extern declaration in main.c is important to inform the compiler that the function "add" is defined in a different file "add.c". In this case, without the extern declaration the compiler cant find the function and an error occurs.

# Why separating compilation can speed up builds
Especially for larger projects it can be an advantage to compile separately because if you make changes in your project you just have to compile a certain, smaller, file and link it to the other files of the project. That contributes to structural clarity of your project but also reduced the amount of data you have to compile at once.

# How manual linking differs from letting gcc handle all steps in one command
Linking manually provides more flexibility at the additional cost of more commands to type.
